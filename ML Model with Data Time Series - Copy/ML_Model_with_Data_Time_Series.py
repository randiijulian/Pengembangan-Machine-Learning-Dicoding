# -*- coding: utf-8 -*-
"""ML_Model_with_Data_Time_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/randiijulian/Pengembangan-Machine-Learning-Dicoding/blob/main/ML_Model_with_Data_Time_Series.ipynb

Nama : Randi Julian Saputra

Github : github.com/randiijulian

Dataset : kaggle.com/datasets/cornflake15/denpasarbalihistoricalweatherdata

## Project Submission 2 Dicoding Pengembangan ML
LSTM Model
"""

from google.colab import drive
drive.mount('/content/drive')

#Import Library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

#install kaggle
# !pip install -U -q kaggle
!pip install kaggle
!mkdir -p ~/.kaggle

#Copy the “kaggle.json” into this new directory
!cp /content/drive/MyDrive/kaggle.json ~/.kaggle/

# #Allocate the required permission for this file.
# ! chmod 600 "/content/drive/MyDrive/kaggle.json"

#download dataset menggunakan link kaggle
!kaggle datasets download -d cornflake15/denpasarbalihistoricalweatherdata
!ls

import zipfile
zip_file = zipfile.ZipFile('/content/denpasarbalihistoricalweatherdata.zip', 'r')
zip_file.extractall('/content')
zip_file.close()

# load the dataset using pandas
import pandas as pd
home_data = pd.read_csv('/content/openweatherdata-denpasar-1990-2020v0.1.csv')
home_data

#Check data null
home_data.isnull().sum()

#Drop attribute that not used
home_data = home_data.drop(home_data.columns[[1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                                        20, 21, 22, 23, 24, 25, 26, 27, 28]],axis=1)
display(home_data.head())

#Check data is null
home_data.isnull().sum()
home_data.info()

#Rename Attribute dt_iso into date
home_data = home_data.rename(columns={'dt_iso': 'date'})
display(home_data.head())

#Plot time series
date = home_data['date'].values
temperature  = home_data['temp'].values
plt.figure(figsize=(15,5))
plt.plot(date, temperature)
plt.title('Denpasar Weather',
          fontsize=20);

from sklearn.model_selection import train_test_split
X_train, X_validation, y_train, y_validation = train_test_split(temperature, date, test_size = 0.2, random_state = 42)
print("X Train= ",len(X_train))
print("X Vaidation= ",len(X_validation))
print("Y train= ",len(y_train))
print("Y Validation= ",len(y_validation))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

tf.keras.backend.set_floatx('float64')
train_set = windowed_dataset(X_train, window_size=64, batch_size=1024, shuffle_buffer=1000)
validation_set = windowed_dataset(X_validation, window_size=64, batch_size=1024, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"), 
  tf.keras.layers.Dense(1),
])

#Menghitung nilai mae
Mae = (home_data['temp'].max() - home_data['temp'].min()) * 0.1
print("Temp Max= ",home_data['temp'].max())
print("Temp Min= ",home_data['temp'].min())
print("MAE= ",Mae)

#Callback 10% mae
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<3.6 and logs.get('val_mae')<3.6):
      print("MAE < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,metrics=["mae"])
trainmodel = model.fit(train_set,epochs=100,validation_data=validation_set,verbose=2,callbacks=[callbacks])

#Plot MAE and Loss
import matplotlib.pyplot as plt
# MAE
plt.plot(trainmodel.history['mae'])
plt.plot(trainmodel.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()  
#Loss
plt.plot(trainmodel.history['loss'])
plt.plot(trainmodel.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
